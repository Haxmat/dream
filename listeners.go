package dream

import (
	"bytes"
	"fmt"

	"github.com/BurntSushi/toml"
	"github.com/Necroforger/discordgo"
	"strings"
)

// -------------------------------------
// Do not edit: Generated by tools/listeners
// --------------------------------------

// LoggingConfig is configuration for what events to track
type LoggingConfig struct {
	ChannelCreate            bool
	ChannelDelete            bool
	ChannelPinsUpdate        bool
	ChannelUpdate            bool
	GuildBanAdd              bool
	GuildBanRemove           bool
	GuildCreate              bool
	GuildDelete              bool
	GuildEmojisUpdate        bool
	GuildIntegrationsUpdate  bool
	GuildMemberAdd           bool
	GuildMemberRemove        bool
	GuildMemberUpdate        bool
	GuildMembersChunk        bool
	GuildRoleCreate          bool
	GuildRoleDelete          bool
	GuildRoleUpdate          bool
	GuildUpdate              bool
	MessageAck               bool
	MessageCreate            bool
	MessageDelete            bool
	MessageDeleteBulk        bool
	MessageReactionAdd       bool
	MessageReactionRemove    bool
	MessageReactionRemoveAll bool
	MessageUpdate            bool
	PresenceUpdate           bool
	PresencesReplace         bool
	Ready                    bool
	RelationshipAdd          bool
	RelationshipRemove       bool
	Resumed                  bool
	TypingStart              bool
	UserGuildSettingsUpdate  bool
	UserNoteUpdate           bool
	UserSettingsUpdate       bool
	UserUpdate               bool
	VoiceServerUpdate        bool
	VoiceStateUpdate         bool
}

// logChannelCreate Logs all ChannelCreate events received from the session
func (b *Bot) logChannelCreate(s *discordgo.Session, e *discordgo.ChannelCreate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("CHANNEL_CREATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logChannelDelete Logs all ChannelDelete events received from the session
func (b *Bot) logChannelDelete(s *discordgo.Session, e *discordgo.ChannelDelete) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("CHANNEL_DELETE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logChannelPinsUpdate Logs all ChannelPinsUpdate events received from the session
func (b *Bot) logChannelPinsUpdate(s *discordgo.Session, e *discordgo.ChannelPinsUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("CHANNEL_PINS_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logChannelUpdate Logs all ChannelUpdate events received from the session
func (b *Bot) logChannelUpdate(s *discordgo.Session, e *discordgo.ChannelUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("CHANNEL_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildBanAdd Logs all GuildBanAdd events received from the session
func (b *Bot) logGuildBanAdd(s *discordgo.Session, e *discordgo.GuildBanAdd) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_BAN_ADD: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildBanRemove Logs all GuildBanRemove events received from the session
func (b *Bot) logGuildBanRemove(s *discordgo.Session, e *discordgo.GuildBanRemove) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_BAN_REMOVE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildCreate Logs all GuildCreate events received from the session
func (b *Bot) logGuildCreate(s *discordgo.Session, e *discordgo.GuildCreate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_CREATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildDelete Logs all GuildDelete events received from the session
func (b *Bot) logGuildDelete(s *discordgo.Session, e *discordgo.GuildDelete) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_DELETE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildEmojisUpdate Logs all GuildEmojisUpdate events received from the session
func (b *Bot) logGuildEmojisUpdate(s *discordgo.Session, e *discordgo.GuildEmojisUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_EMOJIS_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildIntegrationsUpdate Logs all GuildIntegrationsUpdate events received from the session
func (b *Bot) logGuildIntegrationsUpdate(s *discordgo.Session, e *discordgo.GuildIntegrationsUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_INTEGRATIONS_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildMemberAdd Logs all GuildMemberAdd events received from the session
func (b *Bot) logGuildMemberAdd(s *discordgo.Session, e *discordgo.GuildMemberAdd) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_MEMBER_ADD: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildMemberRemove Logs all GuildMemberRemove events received from the session
func (b *Bot) logGuildMemberRemove(s *discordgo.Session, e *discordgo.GuildMemberRemove) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_MEMBER_REMOVE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildMemberUpdate Logs all GuildMemberUpdate events received from the session
func (b *Bot) logGuildMemberUpdate(s *discordgo.Session, e *discordgo.GuildMemberUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_MEMBER_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildMembersChunk Logs all GuildMembersChunk events received from the session
func (b *Bot) logGuildMembersChunk(s *discordgo.Session, e *discordgo.GuildMembersChunk) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_MEMBERS_CHUNK: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildRoleCreate Logs all GuildRoleCreate events received from the session
func (b *Bot) logGuildRoleCreate(s *discordgo.Session, e *discordgo.GuildRoleCreate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_ROLE_CREATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildRoleDelete Logs all GuildRoleDelete events received from the session
func (b *Bot) logGuildRoleDelete(s *discordgo.Session, e *discordgo.GuildRoleDelete) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_ROLE_DELETE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildRoleUpdate Logs all GuildRoleUpdate events received from the session
func (b *Bot) logGuildRoleUpdate(s *discordgo.Session, e *discordgo.GuildRoleUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_ROLE_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logGuildUpdate Logs all GuildUpdate events received from the session
func (b *Bot) logGuildUpdate(s *discordgo.Session, e *discordgo.GuildUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("GUILD_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageAck Logs all MessageAck events received from the session
func (b *Bot) logMessageAck(s *discordgo.Session, e *discordgo.MessageAck) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_ACK: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageCreate Logs all MessageCreate events received from the session
func (b *Bot) logMessageCreate(s *discordgo.Session, e *discordgo.MessageCreate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_CREATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageDelete Logs all MessageDelete events received from the session
func (b *Bot) logMessageDelete(s *discordgo.Session, e *discordgo.MessageDelete) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_DELETE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageDeleteBulk Logs all MessageDeleteBulk events received from the session
func (b *Bot) logMessageDeleteBulk(s *discordgo.Session, e *discordgo.MessageDeleteBulk) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_DELETE_BULK: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageReactionAdd Logs all MessageReactionAdd events received from the session
func (b *Bot) logMessageReactionAdd(s *discordgo.Session, e *discordgo.MessageReactionAdd) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_REACTION_ADD: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageReactionRemove Logs all MessageReactionRemove events received from the session
func (b *Bot) logMessageReactionRemove(s *discordgo.Session, e *discordgo.MessageReactionRemove) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_REACTION_REMOVE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageReactionRemoveAll Logs all MessageReactionRemoveAll events received from the session
func (b *Bot) logMessageReactionRemoveAll(s *discordgo.Session, e *discordgo.MessageReactionRemoveAll) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_REACTION_REMOVE_ALL: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logMessageUpdate Logs all MessageUpdate events received from the session
func (b *Bot) logMessageUpdate(s *discordgo.Session, e *discordgo.MessageUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("MESSAGE_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logPresenceUpdate Logs all PresenceUpdate events received from the session
func (b *Bot) logPresenceUpdate(s *discordgo.Session, e *discordgo.PresenceUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("PRESENCE_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logPresencesReplace Logs all PresencesReplace events received from the session
func (b *Bot) logPresencesReplace(s *discordgo.Session, e *discordgo.PresencesReplace) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("PRESENCES_REPLACE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logReady Logs all Ready events received from the session
func (b *Bot) logReady(s *discordgo.Session, e *discordgo.Ready) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("READY: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logRelationshipAdd Logs all RelationshipAdd events received from the session
func (b *Bot) logRelationshipAdd(s *discordgo.Session, e *discordgo.RelationshipAdd) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("RELATIONSHIP_ADD: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logRelationshipRemove Logs all RelationshipRemove events received from the session
func (b *Bot) logRelationshipRemove(s *discordgo.Session, e *discordgo.RelationshipRemove) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("RELATIONSHIP_REMOVE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logResumed Logs all Resumed events received from the session
func (b *Bot) logResumed(s *discordgo.Session, e *discordgo.Resumed) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("RESUMED: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logTypingStart Logs all TypingStart events received from the session
func (b *Bot) logTypingStart(s *discordgo.Session, e *discordgo.TypingStart) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("TYPING_START: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logUserGuildSettingsUpdate Logs all UserGuildSettingsUpdate events received from the session
func (b *Bot) logUserGuildSettingsUpdate(s *discordgo.Session, e *discordgo.UserGuildSettingsUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("USER_GUILD_SETTINGS_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logUserNoteUpdate Logs all UserNoteUpdate events received from the session
func (b *Bot) logUserNoteUpdate(s *discordgo.Session, e *discordgo.UserNoteUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("USER_NOTE_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logUserSettingsUpdate Logs all UserSettingsUpdate events received from the session
func (b *Bot) logUserSettingsUpdate(s *discordgo.Session, e *discordgo.UserSettingsUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("USER_SETTINGS_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logUserUpdate Logs all UserUpdate events received from the session
func (b *Bot) logUserUpdate(s *discordgo.Session, e *discordgo.UserUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("USER_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logVoiceServerUpdate Logs all VoiceServerUpdate events received from the session
func (b *Bot) logVoiceServerUpdate(s *discordgo.Session, e *discordgo.VoiceServerUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("VOICE_SERVER_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

// logVoiceStateUpdate Logs all VoiceStateUpdate events received from the session
func (b *Bot) logVoiceStateUpdate(s *discordgo.Session, e *discordgo.VoiceStateUpdate) {
	var dat = bytes.Buffer{}
	err := toml.NewEncoder(&dat).Encode(e)
	if err != nil {
		return
	}
	b.Log(0, fmt.Sprint("VOICE_STATE_UPDATE: \n\t", strings.Replace(string(dat.Bytes()), "\n", "\n\t", -1)))
}

func (b *Bot) registerListeners(conf LoggingConfig) {
	if conf.ChannelCreate {
		b.DG.AddHandler(b.logChannelCreate)
	}
	if conf.ChannelDelete {
		b.DG.AddHandler(b.logChannelDelete)
	}
	if conf.ChannelPinsUpdate {
		b.DG.AddHandler(b.logChannelPinsUpdate)
	}
	if conf.ChannelUpdate {
		b.DG.AddHandler(b.logChannelUpdate)
	}
	if conf.GuildBanAdd {
		b.DG.AddHandler(b.logGuildBanAdd)
	}
	if conf.GuildBanRemove {
		b.DG.AddHandler(b.logGuildBanRemove)
	}
	if conf.GuildCreate {
		b.DG.AddHandler(b.logGuildCreate)
	}
	if conf.GuildDelete {
		b.DG.AddHandler(b.logGuildDelete)
	}
	if conf.GuildEmojisUpdate {
		b.DG.AddHandler(b.logGuildEmojisUpdate)
	}
	if conf.GuildIntegrationsUpdate {
		b.DG.AddHandler(b.logGuildIntegrationsUpdate)
	}
	if conf.GuildMemberAdd {
		b.DG.AddHandler(b.logGuildMemberAdd)
	}
	if conf.GuildMemberRemove {
		b.DG.AddHandler(b.logGuildMemberRemove)
	}
	if conf.GuildMemberUpdate {
		b.DG.AddHandler(b.logGuildMemberUpdate)
	}
	if conf.GuildMembersChunk {
		b.DG.AddHandler(b.logGuildMembersChunk)
	}
	if conf.GuildRoleCreate {
		b.DG.AddHandler(b.logGuildRoleCreate)
	}
	if conf.GuildRoleDelete {
		b.DG.AddHandler(b.logGuildRoleDelete)
	}
	if conf.GuildRoleUpdate {
		b.DG.AddHandler(b.logGuildRoleUpdate)
	}
	if conf.GuildUpdate {
		b.DG.AddHandler(b.logGuildUpdate)
	}
	if conf.MessageAck {
		b.DG.AddHandler(b.logMessageAck)
	}
	if conf.MessageCreate {
		b.DG.AddHandler(b.logMessageCreate)
	}
	if conf.MessageDelete {
		b.DG.AddHandler(b.logMessageDelete)
	}
	if conf.MessageDeleteBulk {
		b.DG.AddHandler(b.logMessageDeleteBulk)
	}
	if conf.MessageReactionAdd {
		b.DG.AddHandler(b.logMessageReactionAdd)
	}
	if conf.MessageReactionRemove {
		b.DG.AddHandler(b.logMessageReactionRemove)
	}
	if conf.MessageReactionRemoveAll {
		b.DG.AddHandler(b.logMessageReactionRemoveAll)
	}
	if conf.MessageUpdate {
		b.DG.AddHandler(b.logMessageUpdate)
	}
	if conf.PresenceUpdate {
		b.DG.AddHandler(b.logPresenceUpdate)
	}
	if conf.PresencesReplace {
		b.DG.AddHandler(b.logPresencesReplace)
	}
	if conf.Ready {
		b.DG.AddHandler(b.logReady)
	}
	if conf.RelationshipAdd {
		b.DG.AddHandler(b.logRelationshipAdd)
	}
	if conf.RelationshipRemove {
		b.DG.AddHandler(b.logRelationshipRemove)
	}
	if conf.Resumed {
		b.DG.AddHandler(b.logResumed)
	}
	if conf.TypingStart {
		b.DG.AddHandler(b.logTypingStart)
	}
	if conf.UserGuildSettingsUpdate {
		b.DG.AddHandler(b.logUserGuildSettingsUpdate)
	}
	if conf.UserNoteUpdate {
		b.DG.AddHandler(b.logUserNoteUpdate)
	}
	if conf.UserSettingsUpdate {
		b.DG.AddHandler(b.logUserSettingsUpdate)
	}
	if conf.UserUpdate {
		b.DG.AddHandler(b.logUserUpdate)
	}
	if conf.VoiceServerUpdate {
		b.DG.AddHandler(b.logVoiceServerUpdate)
	}
	if conf.VoiceStateUpdate {
		b.DG.AddHandler(b.logVoiceStateUpdate)
	}
}
