package dream

import (
	"github.com/bwmarrin/discordgo"
)

// -------------------------------------
// Do not edit: Generated by tools/nextevent
// --------------------------------------

// NextChannelCreate returns the next ChannelCreate event
func (s *Session) NextChannelCreate() *discordgo.ChannelCreate {
	return <-s.NextChannelCreateC()
}

// NextChannelDelete returns the next ChannelDelete event
func (s *Session) NextChannelDelete() *discordgo.ChannelDelete {
	return <-s.NextChannelDeleteC()
}

// NextChannelPinsUpdate returns the next ChannelPinsUpdate event
func (s *Session) NextChannelPinsUpdate() *discordgo.ChannelPinsUpdate {
	return <-s.NextChannelPinsUpdateC()
}

// NextChannelUpdate returns the next ChannelUpdate event
func (s *Session) NextChannelUpdate() *discordgo.ChannelUpdate {
	return <-s.NextChannelUpdateC()
}

// NextConnect returns the next Connect event
func (s *Session) NextConnect() *discordgo.Connect {
	return <-s.NextConnectC()
}

// NextDisconnect returns the next Disconnect event
func (s *Session) NextDisconnect() *discordgo.Disconnect {
	return <-s.NextDisconnectC()
}

// NextEvent returns the next Event event
func (s *Session) NextEvent() *discordgo.Event {
	return <-s.NextEventC()
}

// NextGuildBanAdd returns the next GuildBanAdd event
func (s *Session) NextGuildBanAdd() *discordgo.GuildBanAdd {
	return <-s.NextGuildBanAddC()
}

// NextGuildBanRemove returns the next GuildBanRemove event
func (s *Session) NextGuildBanRemove() *discordgo.GuildBanRemove {
	return <-s.NextGuildBanRemoveC()
}

// NextGuildCreate returns the next GuildCreate event
func (s *Session) NextGuildCreate() *discordgo.GuildCreate {
	return <-s.NextGuildCreateC()
}

// NextGuildDelete returns the next GuildDelete event
func (s *Session) NextGuildDelete() *discordgo.GuildDelete {
	return <-s.NextGuildDeleteC()
}

// NextGuildEmojisUpdate returns the next GuildEmojisUpdate event
func (s *Session) NextGuildEmojisUpdate() *discordgo.GuildEmojisUpdate {
	return <-s.NextGuildEmojisUpdateC()
}

// NextGuildIntegrationsUpdate returns the next GuildIntegrationsUpdate event
func (s *Session) NextGuildIntegrationsUpdate() *discordgo.GuildIntegrationsUpdate {
	return <-s.NextGuildIntegrationsUpdateC()
}

// NextGuildMemberAdd returns the next GuildMemberAdd event
func (s *Session) NextGuildMemberAdd() *discordgo.GuildMemberAdd {
	return <-s.NextGuildMemberAddC()
}

// NextGuildMemberRemove returns the next GuildMemberRemove event
func (s *Session) NextGuildMemberRemove() *discordgo.GuildMemberRemove {
	return <-s.NextGuildMemberRemoveC()
}

// NextGuildMemberUpdate returns the next GuildMemberUpdate event
func (s *Session) NextGuildMemberUpdate() *discordgo.GuildMemberUpdate {
	return <-s.NextGuildMemberUpdateC()
}

// NextGuildMembersChunk returns the next GuildMembersChunk event
func (s *Session) NextGuildMembersChunk() *discordgo.GuildMembersChunk {
	return <-s.NextGuildMembersChunkC()
}

// NextGuildRoleCreate returns the next GuildRoleCreate event
func (s *Session) NextGuildRoleCreate() *discordgo.GuildRoleCreate {
	return <-s.NextGuildRoleCreateC()
}

// NextGuildRoleDelete returns the next GuildRoleDelete event
func (s *Session) NextGuildRoleDelete() *discordgo.GuildRoleDelete {
	return <-s.NextGuildRoleDeleteC()
}

// NextGuildRoleUpdate returns the next GuildRoleUpdate event
func (s *Session) NextGuildRoleUpdate() *discordgo.GuildRoleUpdate {
	return <-s.NextGuildRoleUpdateC()
}

// NextGuildUpdate returns the next GuildUpdate event
func (s *Session) NextGuildUpdate() *discordgo.GuildUpdate {
	return <-s.NextGuildUpdateC()
}

// NextMessageAck returns the next MessageAck event
func (s *Session) NextMessageAck() *discordgo.MessageAck {
	return <-s.NextMessageAckC()
}

// NextMessageCreate returns the next MessageCreate event
func (s *Session) NextMessageCreate() *discordgo.MessageCreate {
	return <-s.NextMessageCreateC()
}

// NextMessageDelete returns the next MessageDelete event
func (s *Session) NextMessageDelete() *discordgo.MessageDelete {
	return <-s.NextMessageDeleteC()
}

// NextMessageDeleteBulk returns the next MessageDeleteBulk event
func (s *Session) NextMessageDeleteBulk() *discordgo.MessageDeleteBulk {
	return <-s.NextMessageDeleteBulkC()
}

// NextMessageReactionAdd returns the next MessageReactionAdd event
func (s *Session) NextMessageReactionAdd() *discordgo.MessageReactionAdd {
	return <-s.NextMessageReactionAddC()
}

// NextMessageReactionRemove returns the next MessageReactionRemove event
func (s *Session) NextMessageReactionRemove() *discordgo.MessageReactionRemove {
	return <-s.NextMessageReactionRemoveC()
}

// NextMessageReactionRemoveAll returns the next MessageReactionRemoveAll event
func (s *Session) NextMessageReactionRemoveAll() *discordgo.MessageReactionRemoveAll {
	return <-s.NextMessageReactionRemoveAllC()
}

// NextMessageUpdate returns the next MessageUpdate event
func (s *Session) NextMessageUpdate() *discordgo.MessageUpdate {
	return <-s.NextMessageUpdateC()
}

// NextPresenceUpdate returns the next PresenceUpdate event
func (s *Session) NextPresenceUpdate() *discordgo.PresenceUpdate {
	return <-s.NextPresenceUpdateC()
}

// NextPresencesReplace returns the next PresencesReplace event
func (s *Session) NextPresencesReplace() *discordgo.PresencesReplace {
	return <-s.NextPresencesReplaceC()
}

// NextRateLimit returns the next RateLimit event
func (s *Session) NextRateLimit() *discordgo.RateLimit {
	return <-s.NextRateLimitC()
}

// NextReady returns the next Ready event
func (s *Session) NextReady() *discordgo.Ready {
	return <-s.NextReadyC()
}

// NextRelationshipAdd returns the next RelationshipAdd event
func (s *Session) NextRelationshipAdd() *discordgo.RelationshipAdd {
	return <-s.NextRelationshipAddC()
}

// NextRelationshipRemove returns the next RelationshipRemove event
func (s *Session) NextRelationshipRemove() *discordgo.RelationshipRemove {
	return <-s.NextRelationshipRemoveC()
}

// NextResumed returns the next Resumed event
func (s *Session) NextResumed() *discordgo.Resumed {
	return <-s.NextResumedC()
}

// NextTypingStart returns the next TypingStart event
func (s *Session) NextTypingStart() *discordgo.TypingStart {
	return <-s.NextTypingStartC()
}

// NextUserGuildSettingsUpdate returns the next UserGuildSettingsUpdate event
func (s *Session) NextUserGuildSettingsUpdate() *discordgo.UserGuildSettingsUpdate {
	return <-s.NextUserGuildSettingsUpdateC()
}

// NextUserNoteUpdate returns the next UserNoteUpdate event
func (s *Session) NextUserNoteUpdate() *discordgo.UserNoteUpdate {
	return <-s.NextUserNoteUpdateC()
}

// NextUserSettingsUpdate returns the next UserSettingsUpdate event
func (s *Session) NextUserSettingsUpdate() *discordgo.UserSettingsUpdate {
	return <-s.NextUserSettingsUpdateC()
}

// NextUserUpdate returns the next UserUpdate event
func (s *Session) NextUserUpdate() *discordgo.UserUpdate {
	return <-s.NextUserUpdateC()
}

// NextVoiceServerUpdate returns the next VoiceServerUpdate event
func (s *Session) NextVoiceServerUpdate() *discordgo.VoiceServerUpdate {
	return <-s.NextVoiceServerUpdateC()
}

// NextVoiceStateUpdate returns the next VoiceStateUpdate event
func (s *Session) NextVoiceStateUpdate() *discordgo.VoiceStateUpdate {
	return <-s.NextVoiceStateUpdateC()
}

// NextChannelCreateC returns a channel for the next ChannelCreate event
func (s *Session) NextChannelCreateC() chan *discordgo.ChannelCreate {
	out := make(chan *discordgo.ChannelCreate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.ChannelCreate) {
		out <- e
	})
	return out
}

// NextChannelDeleteC returns a channel for the next ChannelDelete event
func (s *Session) NextChannelDeleteC() chan *discordgo.ChannelDelete {
	out := make(chan *discordgo.ChannelDelete)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.ChannelDelete) {
		out <- e
	})
	return out
}

// NextChannelPinsUpdateC returns a channel for the next ChannelPinsUpdate event
func (s *Session) NextChannelPinsUpdateC() chan *discordgo.ChannelPinsUpdate {
	out := make(chan *discordgo.ChannelPinsUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.ChannelPinsUpdate) {
		out <- e
	})
	return out
}

// NextChannelUpdateC returns a channel for the next ChannelUpdate event
func (s *Session) NextChannelUpdateC() chan *discordgo.ChannelUpdate {
	out := make(chan *discordgo.ChannelUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.ChannelUpdate) {
		out <- e
	})
	return out
}

// NextConnectC returns a channel for the next Connect event
func (s *Session) NextConnectC() chan *discordgo.Connect {
	out := make(chan *discordgo.Connect)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.Connect) {
		out <- e
	})
	return out
}

// NextDisconnectC returns a channel for the next Disconnect event
func (s *Session) NextDisconnectC() chan *discordgo.Disconnect {
	out := make(chan *discordgo.Disconnect)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.Disconnect) {
		out <- e
	})
	return out
}

// NextEventC returns a channel for the next Event event
func (s *Session) NextEventC() chan *discordgo.Event {
	out := make(chan *discordgo.Event)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.Event) {
		out <- e
	})
	return out
}

// NextGuildBanAddC returns a channel for the next GuildBanAdd event
func (s *Session) NextGuildBanAddC() chan *discordgo.GuildBanAdd {
	out := make(chan *discordgo.GuildBanAdd)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildBanAdd) {
		out <- e
	})
	return out
}

// NextGuildBanRemoveC returns a channel for the next GuildBanRemove event
func (s *Session) NextGuildBanRemoveC() chan *discordgo.GuildBanRemove {
	out := make(chan *discordgo.GuildBanRemove)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildBanRemove) {
		out <- e
	})
	return out
}

// NextGuildCreateC returns a channel for the next GuildCreate event
func (s *Session) NextGuildCreateC() chan *discordgo.GuildCreate {
	out := make(chan *discordgo.GuildCreate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildCreate) {
		out <- e
	})
	return out
}

// NextGuildDeleteC returns a channel for the next GuildDelete event
func (s *Session) NextGuildDeleteC() chan *discordgo.GuildDelete {
	out := make(chan *discordgo.GuildDelete)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildDelete) {
		out <- e
	})
	return out
}

// NextGuildEmojisUpdateC returns a channel for the next GuildEmojisUpdate event
func (s *Session) NextGuildEmojisUpdateC() chan *discordgo.GuildEmojisUpdate {
	out := make(chan *discordgo.GuildEmojisUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildEmojisUpdate) {
		out <- e
	})
	return out
}

// NextGuildIntegrationsUpdateC returns a channel for the next GuildIntegrationsUpdate event
func (s *Session) NextGuildIntegrationsUpdateC() chan *discordgo.GuildIntegrationsUpdate {
	out := make(chan *discordgo.GuildIntegrationsUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildIntegrationsUpdate) {
		out <- e
	})
	return out
}

// NextGuildMemberAddC returns a channel for the next GuildMemberAdd event
func (s *Session) NextGuildMemberAddC() chan *discordgo.GuildMemberAdd {
	out := make(chan *discordgo.GuildMemberAdd)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildMemberAdd) {
		out <- e
	})
	return out
}

// NextGuildMemberRemoveC returns a channel for the next GuildMemberRemove event
func (s *Session) NextGuildMemberRemoveC() chan *discordgo.GuildMemberRemove {
	out := make(chan *discordgo.GuildMemberRemove)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildMemberRemove) {
		out <- e
	})
	return out
}

// NextGuildMemberUpdateC returns a channel for the next GuildMemberUpdate event
func (s *Session) NextGuildMemberUpdateC() chan *discordgo.GuildMemberUpdate {
	out := make(chan *discordgo.GuildMemberUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildMemberUpdate) {
		out <- e
	})
	return out
}

// NextGuildMembersChunkC returns a channel for the next GuildMembersChunk event
func (s *Session) NextGuildMembersChunkC() chan *discordgo.GuildMembersChunk {
	out := make(chan *discordgo.GuildMembersChunk)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildMembersChunk) {
		out <- e
	})
	return out
}

// NextGuildRoleCreateC returns a channel for the next GuildRoleCreate event
func (s *Session) NextGuildRoleCreateC() chan *discordgo.GuildRoleCreate {
	out := make(chan *discordgo.GuildRoleCreate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildRoleCreate) {
		out <- e
	})
	return out
}

// NextGuildRoleDeleteC returns a channel for the next GuildRoleDelete event
func (s *Session) NextGuildRoleDeleteC() chan *discordgo.GuildRoleDelete {
	out := make(chan *discordgo.GuildRoleDelete)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildRoleDelete) {
		out <- e
	})
	return out
}

// NextGuildRoleUpdateC returns a channel for the next GuildRoleUpdate event
func (s *Session) NextGuildRoleUpdateC() chan *discordgo.GuildRoleUpdate {
	out := make(chan *discordgo.GuildRoleUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildRoleUpdate) {
		out <- e
	})
	return out
}

// NextGuildUpdateC returns a channel for the next GuildUpdate event
func (s *Session) NextGuildUpdateC() chan *discordgo.GuildUpdate {
	out := make(chan *discordgo.GuildUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.GuildUpdate) {
		out <- e
	})
	return out
}

// NextMessageAckC returns a channel for the next MessageAck event
func (s *Session) NextMessageAckC() chan *discordgo.MessageAck {
	out := make(chan *discordgo.MessageAck)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageAck) {
		out <- e
	})
	return out
}

// NextMessageCreateC returns a channel for the next MessageCreate event
func (s *Session) NextMessageCreateC() chan *discordgo.MessageCreate {
	out := make(chan *discordgo.MessageCreate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageCreate) {
		out <- e
	})
	return out
}

// NextMessageDeleteC returns a channel for the next MessageDelete event
func (s *Session) NextMessageDeleteC() chan *discordgo.MessageDelete {
	out := make(chan *discordgo.MessageDelete)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageDelete) {
		out <- e
	})
	return out
}

// NextMessageDeleteBulkC returns a channel for the next MessageDeleteBulk event
func (s *Session) NextMessageDeleteBulkC() chan *discordgo.MessageDeleteBulk {
	out := make(chan *discordgo.MessageDeleteBulk)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageDeleteBulk) {
		out <- e
	})
	return out
}

// NextMessageReactionAddC returns a channel for the next MessageReactionAdd event
func (s *Session) NextMessageReactionAddC() chan *discordgo.MessageReactionAdd {
	out := make(chan *discordgo.MessageReactionAdd)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageReactionAdd) {
		out <- e
	})
	return out
}

// NextMessageReactionRemoveC returns a channel for the next MessageReactionRemove event
func (s *Session) NextMessageReactionRemoveC() chan *discordgo.MessageReactionRemove {
	out := make(chan *discordgo.MessageReactionRemove)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageReactionRemove) {
		out <- e
	})
	return out
}

// NextMessageReactionRemoveAllC returns a channel for the next MessageReactionRemoveAll event
func (s *Session) NextMessageReactionRemoveAllC() chan *discordgo.MessageReactionRemoveAll {
	out := make(chan *discordgo.MessageReactionRemoveAll)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageReactionRemoveAll) {
		out <- e
	})
	return out
}

// NextMessageUpdateC returns a channel for the next MessageUpdate event
func (s *Session) NextMessageUpdateC() chan *discordgo.MessageUpdate {
	out := make(chan *discordgo.MessageUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.MessageUpdate) {
		out <- e
	})
	return out
}

// NextPresenceUpdateC returns a channel for the next PresenceUpdate event
func (s *Session) NextPresenceUpdateC() chan *discordgo.PresenceUpdate {
	out := make(chan *discordgo.PresenceUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.PresenceUpdate) {
		out <- e
	})
	return out
}

// NextPresencesReplaceC returns a channel for the next PresencesReplace event
func (s *Session) NextPresencesReplaceC() chan *discordgo.PresencesReplace {
	out := make(chan *discordgo.PresencesReplace)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.PresencesReplace) {
		out <- e
	})
	return out
}

// NextRateLimitC returns a channel for the next RateLimit event
func (s *Session) NextRateLimitC() chan *discordgo.RateLimit {
	out := make(chan *discordgo.RateLimit)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.RateLimit) {
		out <- e
	})
	return out
}

// NextReadyC returns a channel for the next Ready event
func (s *Session) NextReadyC() chan *discordgo.Ready {
	out := make(chan *discordgo.Ready)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.Ready) {
		out <- e
	})
	return out
}

// NextRelationshipAddC returns a channel for the next RelationshipAdd event
func (s *Session) NextRelationshipAddC() chan *discordgo.RelationshipAdd {
	out := make(chan *discordgo.RelationshipAdd)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.RelationshipAdd) {
		out <- e
	})
	return out
}

// NextRelationshipRemoveC returns a channel for the next RelationshipRemove event
func (s *Session) NextRelationshipRemoveC() chan *discordgo.RelationshipRemove {
	out := make(chan *discordgo.RelationshipRemove)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.RelationshipRemove) {
		out <- e
	})
	return out
}

// NextResumedC returns a channel for the next Resumed event
func (s *Session) NextResumedC() chan *discordgo.Resumed {
	out := make(chan *discordgo.Resumed)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.Resumed) {
		out <- e
	})
	return out
}

// NextTypingStartC returns a channel for the next TypingStart event
func (s *Session) NextTypingStartC() chan *discordgo.TypingStart {
	out := make(chan *discordgo.TypingStart)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.TypingStart) {
		out <- e
	})
	return out
}

// NextUserGuildSettingsUpdateC returns a channel for the next UserGuildSettingsUpdate event
func (s *Session) NextUserGuildSettingsUpdateC() chan *discordgo.UserGuildSettingsUpdate {
	out := make(chan *discordgo.UserGuildSettingsUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.UserGuildSettingsUpdate) {
		out <- e
	})
	return out
}

// NextUserNoteUpdateC returns a channel for the next UserNoteUpdate event
func (s *Session) NextUserNoteUpdateC() chan *discordgo.UserNoteUpdate {
	out := make(chan *discordgo.UserNoteUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.UserNoteUpdate) {
		out <- e
	})
	return out
}

// NextUserSettingsUpdateC returns a channel for the next UserSettingsUpdate event
func (s *Session) NextUserSettingsUpdateC() chan *discordgo.UserSettingsUpdate {
	out := make(chan *discordgo.UserSettingsUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.UserSettingsUpdate) {
		out <- e
	})
	return out
}

// NextUserUpdateC returns a channel for the next UserUpdate event
func (s *Session) NextUserUpdateC() chan *discordgo.UserUpdate {
	out := make(chan *discordgo.UserUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.UserUpdate) {
		out <- e
	})
	return out
}

// NextVoiceServerUpdateC returns a channel for the next VoiceServerUpdate event
func (s *Session) NextVoiceServerUpdateC() chan *discordgo.VoiceServerUpdate {
	out := make(chan *discordgo.VoiceServerUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.VoiceServerUpdate) {
		out <- e
	})
	return out
}

// NextVoiceStateUpdateC returns a channel for the next VoiceStateUpdate event
func (s *Session) NextVoiceStateUpdateC() chan *discordgo.VoiceStateUpdate {
	out := make(chan *discordgo.VoiceStateUpdate)
	s.DG.AddHandlerOnce(func(s *discordgo.Session, e *discordgo.VoiceStateUpdate) {
		out <- e
	})
	return out
}
